/*
SQLyog Ultimate v12.09 (64 bit)
MySQL - 5.5.27 : Database - blog
*********************************************************************
*/

/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
CREATE DATABASE /*!32312 IF NOT EXISTS*/`blog` /*!40100 DEFAULT CHARACTER SET utf8 */;

USE `blog`;

/*Table structure for table `tp_admin` */

DROP TABLE IF EXISTS `tp_admin`;

CREATE TABLE `tp_admin` (
  `id` mediumint(9) NOT NULL AUTO_INCREMENT,
  `username` varchar(30) NOT NULL COMMENT '管理员名称',
  `password` char(32) NOT NULL COMMENT '管理员密码',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=33 DEFAULT CHARSET=utf8;

/*Data for the table `tp_admin` */

insert  into `tp_admin`(`id`,`username`,`password`) values (1,'zdj','0de94f8bf87cb8e4f660a19284e33ff6');

/*Table structure for table `tp_article` */

DROP TABLE IF EXISTS `tp_article`;

CREATE TABLE `tp_article` (
  `id` mediumint(9) NOT NULL AUTO_INCREMENT COMMENT '文章id',
  `title` varchar(60) NOT NULL COMMENT '文章标题',
  `author` varchar(30) NOT NULL COMMENT '文章作者',
  `desc` varchar(255) NOT NULL COMMENT '文章简介',
  `keywords` varchar(255) NOT NULL COMMENT '文章关键词',
  `content` text NOT NULL COMMENT '文章内容',
  `pic` varchar(100) NOT NULL COMMENT '缩略图',
  `click` int(10) NOT NULL DEFAULT '0' COMMENT '点击数',
  `state` tinyint(1) NOT NULL DEFAULT '0' COMMENT '0:不推荐 1：推荐',
  `time` int(10) NOT NULL COMMENT '发布时间',
  `cateid` mediumint(9) NOT NULL COMMENT '所属栏目',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=19 DEFAULT CHARSET=utf8;

/*Data for the table `tp_article` */

insert  into `tp_article`(`id`,`title`,`author`,`desc`,`keywords`,`content`,`pic`,`click`,`state`,`time`,`cateid`) values (10,'JavaScript执行机制','张端建','本文的目的就是要帮你弄懂javascript的执行机制，\r\n不论你是javascript新手还是老鸟，不论是面试求职，还是日常开发工作，我们经常会遇到这样的情况：给定的几行代码','JavaScript,机制','<p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\">本文的目的就是要保证你彻底弄懂javascript的执行机制。</p><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\">不论你是javascript新手还是老鸟，不论是面试求职，还是日常开发工作，我们经常会遇到这样的情况：给定的几行代码，我们需要知道其输出内容和顺序。因为javascript是一门单线程语言，所以我们可以得出结论：</p><ul style=\"padding: 0px 0px 0px 28px\" class=\" list-paddingleft-2\"><li><p>javascript是按照语句出现的顺序执行的</p></li></ul><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\">看到这里读者要打人了：我难道不知道js是一行一行执行的？还用你说？稍安勿躁，正因为js是一行一行执行的，所以我们以为js都是这样的：</p><pre style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 1em;line-height: 1.75;overflow: auto;position: relative\">let&nbsp;a&nbsp;=&nbsp;&#39;1&#39;;&nbsp;console.log(a);&nbsp;let&nbsp;b&nbsp;=&nbsp;&#39;2&#39;;&nbsp;console.log(b);复制代码</pre><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\"><br/></p><p><br/></p><figure style=\"margin: 22px auto;text-align: center\"><img alt=\"\" class=\"lazyload inited loaded\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/20/15fd87f7221d0dbe?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"198\" data-height=\"135\" src=\"https://user-gold-cdn.xitu.io/2017/11/20/15fd87f7221d0dbe?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" style=\"width: auto;height: auto;border-style: none;max-height: none;max-width: 100%;visibility: visible;background-color: transparent;background-position: 50% center;background-repeat: no-repeat;background-image: none;cursor: zoom-in\"/><figcaption style=\"font-size: 1rem;line-height: 1.6;color: rgb(144, 144, 144);margin-top: 2px\"></figcaption></figure><p><br/></p><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\"><br/></p><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\">然而实际上js是这样的：</p><pre style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 1em;line-height: 1.75;overflow: auto;position: relative\">setTimeout(function(){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;定时器开始啦&#39;)&nbsp;});&nbsp;new&nbsp;Promise(function(resolve){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;马上执行for循环啦&#39;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(var&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;10000;&nbsp;i++){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i&nbsp;==&nbsp;99&nbsp;&amp;&amp;&nbsp;resolve();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;}).then(function(){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;执行then函数啦&#39;)&nbsp;});&nbsp;console.log(&#39;代码执行结束&#39;);复制代码</pre><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\"><br/></p><p><br/></p><figure style=\"margin: 22px auto;text-align: center\"><img alt=\"\" class=\"lazyload inited loaded\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/20/15fd87d38acc4905?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"148\" data-height=\"133\" src=\"https://user-gold-cdn.xitu.io/2017/11/20/15fd87d38acc4905?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" style=\"width: auto;height: auto;border-style: none;max-height: none;max-width: 100%;visibility: visible;background-color: transparent;background-position: 50% center;background-repeat: no-repeat;background-image: none;cursor: zoom-in\"/><figcaption style=\"font-size: 1rem;line-height: 1.6;color: rgb(144, 144, 144);margin-top: 2px\"></figcaption></figure><p><br/></p><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\"><br/></p><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\">依照<span style=\"font-weight: 700;font-size: 20px\">js是按照语句出现的顺序执行</span>这个理念，我自信的写下输出结果：</p><pre style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 1em;line-height: 1.75;overflow: auto;position: relative\">//&quot;定时器开始啦&quot;&nbsp;//&quot;马上执行for循环啦&quot;&nbsp;//&quot;执行then函数啦&quot;&nbsp;//&quot;代码执行结束&quot;复制代码</pre><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\">去chrome上验证下，结果完全不对，瞬间懵了，说好的一行一行执行的呢？</p><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\"><br/></p><p><br/></p><figure style=\"margin: 22px auto;text-align: center\"><img alt=\"\" class=\"lazyload inited loaded\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/20/15fd8840f3c3f109?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"250\" data-height=\"250\" src=\"https://user-gold-cdn.xitu.io/2017/11/20/15fd8840f3c3f109?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" style=\"width: auto;height: auto;border-style: none;max-height: none;max-width: 100%;visibility: visible;background-color: transparent;background-position: 50% center;background-repeat: no-repeat;background-image: none;cursor: zoom-in\"/><figcaption style=\"font-size: 1rem;line-height: 1.6;color: rgb(144, 144, 144);margin-top: 2px\"></figcaption></figure><p><br/></p><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\"><br/></p><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\">我们真的要彻底弄明白javascript的执行机制了。</p><h3 data-id=\"heading-0\" style=\"line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px\">1.关于javascript</h3><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\">javascript是一门<span style=\"font-weight: 700;font-size: 20px\">单线程</span>语言，在最新的HTML5中提出了Web-Worker，但javascript是单线程这一核心仍未改变。所以一切javascript版的&quot;多线程&quot;都是用单线程模拟出来的，一切javascript多线程都是纸老虎！</p><h3 data-id=\"heading-1\" style=\"line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px\">2.javascript事件循环</h3><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\">既然js是单线程，那就像只有一个窗口的银行，客户需要排队一个一个办理业务，同理js任务也要一个一个顺序执行。如果一个任务耗时过长，那么后一个任务也必须等着。那么问题来了，假如我们想浏览新闻，但是新闻包含的超清图片加载很慢，难道我们的网页要一直卡着直到图片完全显示出来？因此聪明的程序员将任务分为两类：</p><ul style=\"padding: 0px 0px 0px 28px\" class=\" list-paddingleft-2\"><li><p>同步任务</p></li><li><p>异步任务</p></li></ul><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\">当我们打开网站时，网页的渲染过程就是一大堆同步任务，比如页面骨架和页面元素的渲染。而像加载图片音乐之类占用资源大耗时久的任务，就是异步任务。关于这部分有严格的文字定义，但本文的目的是用最小的学习成本彻底弄懂执行机制，所以我们用导图来说明：</p><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\"><br/></p><p><br/></p><figure style=\"margin: 22px auto;text-align: center\"><img alt=\"\" class=\"lazyload inited loaded\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/21/15fdd88994142347?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1280\" data-height=\"1070\" src=\"https://user-gold-cdn.xitu.io/2017/11/21/15fdd88994142347?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" style=\"width: auto;height: auto;border-style: none;max-height: none;max-width: 100%;visibility: visible;background-color: transparent;background-position: 50% center;background-repeat: no-repeat;background-image: none;cursor: zoom-in\"/><figcaption style=\"font-size: 1rem;line-height: 1.6;color: rgb(144, 144, 144);margin-top: 2px\"></figcaption></figure><p><br/></p><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\"><br/></p><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\">导图要表达的内容用文字来表述的话：</p><ul style=\"padding: 0px 0px 0px 28px\" class=\" list-paddingleft-2\"><li><p>同步和异步任务分别进入不同的执行&quot;场所&quot;，同步的进入主线程，异步的进入Event Table并注册函数。</p></li><li><p>当指定的事情完成时，Event Table会将这个函数移入Event Queue。</p></li><li><p>主线程内的任务执行完毕为空，会去Event Queue读取对应的函数，进入主线程执行。</p></li><li><p>上述过程会不断重复，也就是常说的Event Loop(事件循环)。</p></li></ul><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\">我们不禁要问了，那怎么知道主线程执行栈为空啊？js引擎存在monitoring process进程，会持续不断的检查主线程执行栈是否为空，一旦为空，就会去Event Queue那里检查是否有等待被调用的函数。</p><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\">说了这么多文字，不如直接一段代码更直白：</p><pre style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 1em;line-height: 1.75;overflow: auto;position: relative\">let&nbsp;data&nbsp;=&nbsp;[];&nbsp;$.ajax({&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url:www.javascript.com,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data:data,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;success:()&nbsp;=&gt;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;发送成功!&#39;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;})&nbsp;console.log(&#39;代码执行结束&#39;);复制代码</pre><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\">上面是一段简易的<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">ajax</code>请求代码：</p><ul style=\"padding: 0px 0px 0px 28px\" class=\" list-paddingleft-2\"><li><p>ajax进入Event Table，注册回调函数<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">success</code>。</p></li><li><p>执行<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">console.log(&#39;代码执行结束&#39;)</code>。</p></li><li><p>ajax事件完成，回调函数<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">success</code>进入Event Queue。</p></li><li><p>主线程从Event Queue读取回调函数<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">success</code>并执行。</p></li></ul><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\">相信通过上面的文字和代码，你已经对js的执行顺序有了初步了解。接下来我们来研究进阶话题：setTimeout。</p><h3 data-id=\"heading-2\" style=\"line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px\">3.又爱又恨的setTimeout</h3><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\">大名鼎鼎的<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">setTimeout</code>无需再多言，大家对他的第一印象就是异步可以延时执行，我们经常这么实现延时3秒执行：</p><pre style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 1em;line-height: 1.75;overflow: auto;position: relative\">setTimeout(()&nbsp;=&gt;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;延时3秒&#39;);&nbsp;},3000)复制代码</pre><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\">渐渐的<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">setTimeout</code>用的地方多了，问题也出现了，有时候明明写的延时3秒，实际却5，6秒才执行函数，这又咋回事啊？</p><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\">先看一个例子：</p><pre style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 1em;line-height: 1.75;overflow: auto;position: relative\">setTimeout(()&nbsp;=&gt;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;task();&nbsp;},3000)&nbsp;console.log(&#39;执行console&#39;);复制代码</pre><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\">根据前面我们的结论，<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">setTimeout</code>是异步的，应该先执行<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">console.log</code>这个同步任务，所以我们的结论是：</p><pre style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 1em;line-height: 1.75;overflow: auto;position: relative\">//执行console&nbsp;//task()复制代码</pre><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\">去验证一下，结果正确！<br/>然后我们修改一下前面的代码：</p><pre style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 1em;line-height: 1.75;overflow: auto;position: relative\">setTimeout(()&nbsp;=&gt;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;task()&nbsp;},3000)&nbsp;sleep(10000000)复制代码</pre><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\">乍一看其实差不多嘛，但我们把这段代码在chrome执行一下，却发现控制台执行<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">task()</code>需要的时间远远超过3秒，说好的延时三秒，为啥现在需要这么长时间啊？</p><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\">这时候我们需要重新理解<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">setTimeout</code>的定义。我们先说上述代码是怎么执行的：</p><ul style=\"padding: 0px 0px 0px 28px\" class=\" list-paddingleft-2\"><li><p><code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">task()</code>进入Event Table并注册,计时开始。</p></li><li><p>执行<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">sleep</code>函数，很慢，非常慢，计时仍在继续。</p></li><li><p>3秒到了，计时事件<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">timeout</code>完成，<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">task()</code>进入Event Queue，但是<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">sleep</code>也太慢了吧，还没执行完，只好等着。</p></li><li><p><code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">sleep</code>终于执行完了，<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">task()</code>终于从Event Queue进入了主线程执行。</p></li></ul><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\">上述的流程走完，我们知道<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">setTimeout</code>这个函数，是经过指定时间后，把要执行的任务(本例中为<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">task()</code>)加入到Event Queue中，又因为是单线程任务要一个一个执行，如果前面的任务需要的时间太久，那么只能等着，导致真正的延迟时间远远大于3秒。</p><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\">我们还经常遇到<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">setTimeout(fn,0)</code>这样的代码，0秒后执行又是什么意思呢？是不是可以立即执行呢？</p><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\">答案是不会的，<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">setTimeout(fn,0)</code>的含义是，指定某个任务在主线程最早可得的空闲时间执行，意思就是不用再等多少秒了，只要主线程执行栈内的同步任务全部执行完成，栈为空就马上执行。举例说明：</p><pre style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 1em;line-height: 1.75;overflow: auto;position: relative\">//代码1&nbsp;console.log(&#39;先执行这里&#39;);&nbsp;setTimeout(()&nbsp;=&gt;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;执行啦&#39;)&nbsp;},0);复制代码</pre><pre style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 1em;line-height: 1.75;overflow: auto;position: relative\">//代码2&nbsp;console.log(&#39;先执行这里&#39;);&nbsp;setTimeout(()&nbsp;=&gt;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;执行啦&#39;)&nbsp;},3000);复制代码</pre><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\">代码1的输出结果是：</p><pre style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 1em;line-height: 1.75;overflow: auto;position: relative\">//先执行这里&nbsp;//执行啦复制代码</pre><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\">代码2的输出结果是：</p><pre style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 1em;line-height: 1.75;overflow: auto;position: relative\">//先执行这里&nbsp;//&nbsp;...&nbsp;3s&nbsp;later&nbsp;//&nbsp;执行啦复制代码</pre><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\">关于<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">setTimeout</code>要补充的是，即便主线程为空，0毫秒实际上也是达不到的。根据HTML的标准，最低是4毫秒。有兴趣的同学可以自行了解。</p><h3 data-id=\"heading-3\" style=\"line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px\">4.又恨又爱的setInterval</h3><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\">上面说完了<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">setTimeout</code>，当然不能错过它的孪生兄弟<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">setInterval</code>。他俩差不多，只不过后者是循环的执行。对于执行顺序来说，<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">setInterval</code>会每隔指定的时间将注册的函数置入Event Queue，如果前面的任务耗时太久，那么同样需要等待。</p><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\">唯一需要注意的一点是，对于<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">setInterval(fn,ms)</code>来说，我们已经知道不是每过<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">ms</code>秒会执行一次<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">fn</code>，而是每过<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">ms</code>秒，会有<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">fn</code>进入Event Queue。一旦<span style=\"font-weight: 700\"><code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">setInterval</code>的回调函数<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">fn</code>执行时间超过了延迟时间<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">ms</code>，那么就完全看不出来有时间间隔了</span>。这句话请读者仔细品味。</p><h3 data-id=\"heading-4\" style=\"line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px\">5.Promise与process.nextTick(callback)</h3><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\">传统的定时器我们已经研究过了，接着我们探究<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">Promise</code>与<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">process.nextTick(callback)</code>的表现。</p><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\"><code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">Promise</code>的定义和功能本文不再赘述，不了解的读者可以学习一下阮一峰老师的<a href=\"https://link.juejin.im/?target=http%3A%2F%2Fes6.ruanyifeng.com%2F%23docs%2Fpromise\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" style=\";background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)\">Promise</a>。而<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">process.nextTick(callback)</code>类似node.js版的&quot;setTimeout&quot;，在事件循环的下一次循环中调用 callback 回调函数。</p><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\">我们进入正题，除了广义的同步任务和异步任务，我们对任务有更精细的定义：</p><ul style=\"padding: 0px 0px 0px 28px\" class=\" list-paddingleft-2\"><li><p>macro-task(宏任务)：包括整体代码script，setTimeout，setInterval</p></li><li><p>micro-task(微任务)：Promise，process.nextTick</p></li></ul><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\">不同类型的任务会进入对应的Event Queue，比如<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">setTimeout</code>和<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">setInterval</code>会进入相同的Event Queue。</p><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\">事件循环的顺序，决定js代码的执行顺序。进入整体代码(宏任务)后，开始第一次循环。接着执行所有的微任务。然后再次从宏任务开始，找到其中一个任务队列执行完毕，再执行所有的微任务。听起来有点绕，我们用文章最开始的一段代码说明：</p><pre style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 1em;line-height: 1.75;overflow: auto;position: relative\">setTimeout(function()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;setTimeout&#39;);&nbsp;})&nbsp;new&nbsp;Promise(function(resolve)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;promise&#39;);&nbsp;}).then(function()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;then&#39;);&nbsp;})&nbsp;console.log(&#39;console&#39;);复制代码</pre><ul style=\"padding: 0px 0px 0px 28px\" class=\" list-paddingleft-2\"><li><p>这段代码作为宏任务，进入主线程。</p></li><li><p>先遇到<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">setTimeout</code>，那么将其回调函数注册后分发到宏任务Event Queue。(注册过程与上同，下文不再描述)</p></li><li><p>接下来遇到了<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">Promise</code>，<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">new Promise</code>立即执行，<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">then</code>函数分发到微任务Event Queue。</p></li><li><p>遇到<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">console.log()</code>，立即执行。</p></li><li><p>好啦，整体代码script作为第一个宏任务执行结束，看看有哪些微任务？我们发现了<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">then</code>在微任务Event Queue里面，执行。</p></li><li><p>ok，第一轮事件循环结束了，我们开始第二轮循环，当然要从宏任务Event Queue开始。我们发现了宏任务Event Queue中<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">setTimeout</code>对应的回调函数，立即执行。</p></li><li><p>结束。</p></li></ul><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\">事件循环，宏任务，微任务的关系如图所示：</p><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\"><br/></p><p><br/></p><figure style=\"margin: 22px auto;text-align: center\"><img alt=\"\" class=\"lazyload inited loaded\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/21/15fdcea13361a1ec?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1280\" data-height=\"1072\" src=\"https://user-gold-cdn.xitu.io/2017/11/21/15fdcea13361a1ec?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" style=\"width: auto;height: auto;border-style: none;max-height: none;max-width: 100%;visibility: visible;background-color: transparent;background-position: 50% center;background-repeat: no-repeat;background-image: none;cursor: zoom-in\"/><figcaption style=\"font-size: 1rem;line-height: 1.6;color: rgb(144, 144, 144);margin-top: 2px\"></figcaption></figure><p><br/></p><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\"><br/></p><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\">我们来分析一段较复杂的代码，看看你是否真的掌握了js的执行机制：</p><pre style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 1em;line-height: 1.75;overflow: auto;position: relative\">console.log(&#39;1&#39;);&nbsp;setTimeout(function()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;2&#39;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;process.nextTick(function()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;3&#39;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;Promise(function(resolve)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;4&#39;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resolve();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}).then(function()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;5&#39;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})&nbsp;})&nbsp;process.nextTick(function()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;6&#39;);&nbsp;})&nbsp;new&nbsp;Promise(function(resolve)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;7&#39;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resolve();&nbsp;}).then(function()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;8&#39;)&nbsp;})&nbsp;setTimeout(function()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;9&#39;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;process.nextTick(function()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;10&#39;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;Promise(function(resolve)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;11&#39;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resolve();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}).then(function()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;12&#39;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})&nbsp;})复制代码</pre><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\">第一轮事件循环流程分析如下：</p><ul style=\"padding: 0px 0px 0px 28px\" class=\" list-paddingleft-2\"><li><p>整体script作为第一个宏任务进入主线程，遇到<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">console.log</code>，输出1。</p></li><li><p>遇到<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">setTimeout</code>，其回调函数被分发到宏任务Event Queue中。我们暂且记为<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">setTimeout1</code>。</p></li><li><p>遇到<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">process.nextTick()</code>，其回调函数被分发到微任务Event Queue中。我们记为<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">process1</code>。</p></li><li><p>遇到<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">Promise</code>，<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">new Promise</code>直接执行，输出7。<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">then</code>被分发到微任务Event Queue中。我们记为<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">then1</code>。</p></li><li><p>又遇到了<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">setTimeout</code>，其回调函数被分发到宏任务Event Queue中，我们记为<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">setTimeout2</code>。</p></li></ul><table width=\"NaN\"><thead style=\"background: rgb(246, 246, 246);color: rgb(0, 0, 0)\"><tr class=\"firstRow\"><th style=\"padding: 1rem 0.6rem;line-height: 2rem;text-align: center\">宏任务Event Queue</th><th style=\"padding: 1rem 0.6rem;line-height: 2rem;text-align: center\">微任务Event Queue</th></tr></thead><tbody><tr><td style=\"padding: 1rem 0.6rem;line-height: 2rem;min-width: 10rem;text-align: center\">setTimeout1</td><td style=\"padding: 1rem 0.6rem;line-height: 2rem;min-width: 10rem;text-align: center\">process1</td></tr><tr style=\"background-color: rgb(252, 252, 252)\"><td style=\"padding: 1rem 0.6rem;line-height: 2rem;min-width: 10rem;text-align: center\">setTimeout2</td><td style=\"padding: 1rem 0.6rem;line-height: 2rem;min-width: 10rem;text-align: center\">then1</td></tr></tbody></table><ul style=\"padding: 0px 0px 0px 28px\" class=\" list-paddingleft-2\"><li><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\">上表是第一轮事件循环宏任务结束时各Event Queue的情况，此时已经输出了1和7。</p></li><li><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\">我们发现了<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">process1</code>和<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">then1</code>两个微任务。</p></li><li><p>执行<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">process1</code>,输出6。</p></li><li><p>执行<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">then1</code>，输出8。</p></li></ul><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\">好了，第一轮事件循环正式结束，这一轮的结果是输出1，7，6，8。那么第二轮时间循环从<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">setTimeout1</code>宏任务开始：</p><ul style=\"padding: 0px 0px 0px 28px\" class=\" list-paddingleft-2\"><li><p>首先输出2。接下来遇到了<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">process.nextTick()</code>，同样将其分发到微任务Event Queue中，记为<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">process2</code>。<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">new Promise</code>立即执行输出4，<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">then</code>也分发到微任务Event Queue中，记为<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">then2</code>。</p></li></ul><table width=\"NaN\"><thead style=\"background: rgb(246, 246, 246);color: rgb(0, 0, 0)\"><tr class=\"firstRow\"><th style=\"padding: 1rem 0.6rem;line-height: 2rem;text-align: center\">宏任务Event Queue</th><th style=\"padding: 1rem 0.6rem;line-height: 2rem;text-align: center\">微任务Event Queue</th></tr></thead><tbody><tr><td style=\"padding: 1rem 0.6rem;line-height: 2rem;min-width: 10rem;text-align: center\">setTimeout2</td><td style=\"padding: 1rem 0.6rem;line-height: 2rem;min-width: 10rem;text-align: center\">process2</td></tr><tr style=\"background-color: rgb(252, 252, 252)\"><td style=\"padding: 1rem 0.6rem;line-height: 2rem;min-width: 10rem;text-align: center\"><br/></td><td style=\"padding: 1rem 0.6rem;line-height: 2rem;min-width: 10rem;text-align: center\">then2</td></tr></tbody></table><ul style=\"padding: 0px 0px 0px 28px\" class=\" list-paddingleft-2\"><li><p>第二轮事件循环宏任务结束，我们发现有<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">process2</code>和<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">then2</code>两个微任务可以执行。</p></li><li><p>输出3。</p></li><li><p>输出5。</p></li><li><p>第二轮事件循环结束，第二轮输出2，4，3，5。</p></li><li><p>第三轮事件循环开始，此时只剩setTimeout2了，执行。</p></li><li><p>直接输出9。</p></li><li><p>将<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">process.nextTick()</code>分发到微任务Event Queue中。记为<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">process3</code>。</p></li><li><p>直接执行<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">new Promise</code>，输出11。</p></li><li><p>将<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">then</code>分发到微任务Event Queue中，记为<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">then3</code>。</p></li></ul><table width=\"NaN\"><thead style=\"background: rgb(246, 246, 246);color: rgb(0, 0, 0)\"><tr class=\"firstRow\"><th style=\"padding: 1rem 0.6rem;line-height: 2rem;text-align: center\">宏任务Event Queue</th><th style=\"padding: 1rem 0.6rem;line-height: 2rem;text-align: center\">微任务Event Queue</th></tr></thead><tbody><tr><td style=\"padding: 1rem 0.6rem;line-height: 2rem;min-width: 10rem;text-align: center\"><br/></td><td style=\"padding: 1rem 0.6rem;line-height: 2rem;min-width: 10rem;text-align: center\">process3</td></tr><tr style=\"background-color: rgb(252, 252, 252)\"><td style=\"padding: 1rem 0.6rem;line-height: 2rem;min-width: 10rem;text-align: center\"><br/></td><td style=\"padding: 1rem 0.6rem;line-height: 2rem;min-width: 10rem;text-align: center\">then3</td></tr></tbody></table><ul style=\"padding: 0px 0px 0px 28px\" class=\" list-paddingleft-2\"><li><p>第三轮事件循环宏任务执行结束，执行两个微任务<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">process3</code>和<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">then3</code>。</p></li><li><p>输出10。</p></li><li><p>输出12。</p></li><li><p>第三轮事件循环结束，第三轮输出9，11，10，12。</p></li></ul><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\">整段代码，共进行了三次事件循环，完整的输出为1，7，6，8，2，4，3，5，9，11，10，12。<br/>(请注意，node环境下的事件监听依赖libuv与前端环境不完全相同，输出顺序可能会有误差)</p><h3 data-id=\"heading-5\" style=\"line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px\">6.写在最后</h3><h4 data-id=\"heading-6\" style=\"line-height: 1.5;margin-top: 0px;margin-bottom: 10px;padding-bottom: 5px;font-size: 16px\">(1)js的异步</h4><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\">我们从最开头就说javascript是一门单线程语言，不管是什么新框架新语法糖实现的所谓异步，其实都是用同步的方法去模拟的，牢牢把握住单线程这点非常重要。</p><h4 data-id=\"heading-7\" style=\"line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-size: 16px\">(2)事件循环Event Loop</h4><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\">事件循环是js实现异步的一种方法，也是js的执行机制。</p><h4 data-id=\"heading-8\" style=\"line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-size: 16px\">(3)javascript的执行和运行</h4><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\">执行和运行有很大的区别，javascript在不同的环境下，比如node，浏览器，Ringo等等，执行方式是不同的。而运行大多指javascript解析引擎，是统一的。</p><h4 data-id=\"heading-9\" style=\"line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-size: 16px\">(4)setImmediate</h4><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\">微任务和宏任务还有很多种类，比如<code style=\"font-family: Menlo, Monaco, Consolas, &#39;Courier New&#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto\">setImmediate</code>等等，执行都是有共同点的，有兴趣的同学可以自行了解。</p><h4 data-id=\"heading-10\" style=\"line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-size: 16px\">(5)最后的最后</h4><ul style=\"padding: 0px 0px 0px 28px\" class=\" list-paddingleft-2\"><li><p>javascript是一门单线程语言</p></li><li><p>Event Loop是javascript的执行机制</p></li></ul><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\">牢牢把握两个基本点，以认真学习javascript为中心，早日实现成为前端高手的伟大梦想！</p><p style=\"line-height: inherit;margin-top: 22px;margin-bottom: 22px\"><br/></p><p><br/></p><figure style=\"margin: 22px auto;text-align: center\"><img alt=\"\" class=\"lazyload inited loaded\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/21/15fdd96beade6575?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"314\" data-height=\"286\" src=\"https://user-gold-cdn.xitu.io/2017/11/21/15fdd96beade6575?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" style=\"width: auto;height: auto;border-style: none;max-height: none;max-width: 100%;visibility: visible;background-color: transparent;background-position: 50% center;background-repeat: no-repeat;background-image: none;cursor: zoom-in\"/></figure><p><br/></p><p><br/></p>','/uploads/20190508\\30638c9055c20f50a13d96c0b1d199dd.jpg',766,1,1557104208,8);

/*Table structure for table `tp_cate` */

DROP TABLE IF EXISTS `tp_cate`;

CREATE TABLE `tp_cate` (
  `id` mediumint(9) NOT NULL AUTO_INCREMENT COMMENT '栏目id',
  `catename` varchar(30) NOT NULL COMMENT '栏目名称',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=13 DEFAULT CHARSET=utf8;

/*Data for the table `tp_cate` */

insert  into `tp_cate`(`id`,`catename`) values (2,'技术杂谈'),(3,'网站优化'),(4,'框架'),(6,'爬虫'),(7,'后端'),(8,'前端');

/*Table structure for table `tp_links` */

DROP TABLE IF EXISTS `tp_links`;

CREATE TABLE `tp_links` (
  `id` mediumint(9) NOT NULL AUTO_INCREMENT COMMENT '链接id',
  `title` varchar(30) NOT NULL COMMENT '链接标题',
  `url` varchar(60) NOT NULL COMMENT '链接地址',
  `desc` varchar(255) NOT NULL COMMENT '链接说明',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;

/*Data for the table `tp_links` */

insert  into `tp_links`(`id`,`title`,`url`,`desc`) values (7,'来学网','www.laixueya.com','');

/*Table structure for table `tp_tags` */

DROP TABLE IF EXISTS `tp_tags`;

CREATE TABLE `tp_tags` (
  `id` mediumint(9) NOT NULL AUTO_INCREMENT COMMENT 'tag标签id',
  `tagname` varchar(30) NOT NULL COMMENT 'tag标签名称',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

/*Data for the table `tp_tags` */

insert  into `tp_tags`(`id`,`tagname`) values (1,'JavaScript'),(2,'VUE'),(3,'Python');

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
